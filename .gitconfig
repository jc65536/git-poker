[alias]
    # Self explanatory
    all-in = "! \
        git add -A && \
        git commit \"${@:--m All in.}\" && \
        git push -f && \
        echo 'All in! Remember to rotate your secrets.' #"

    # Fold = discard your cards (changes)
    fold = reset --hard

    # Neutral action
    check = status

    raise = ! git add -A && git commit

    # Straddling is betting on top of the big blind, similar to rebasing on top
    # of another branch. Both can be risky.
    straddle = rebase

    # Family pot is when everyone's in
    family-pot = "! \
        git for-each-ref --format='%(refname:short)' refs/heads | \
        while read -r head; do \
            git switch \"$head\" && \
            git add -A && \
            git commit \"$@\"; \
        done #"

    # First three cards
    flop = log -n 3

    shove = all-in

    call = "! \
        if (( $# < 1 )); then \
            echo \"Usage: git call [commit-options] <branch>\"; \
            exit 1; \
        fi; \
        new_commit_count=1; \
        branch=\"${@: -1}\"; \
        echo \"Calling $branch\"; \
        commit() { \
            git commit \"${@:--m Calling $branch #$new_commit_count}\"; \
        }; \
        commit_empty() { \
            git commit --allow-empty \"${@:--m Calling $branch #$new_commit_count}\"; \
        }; \
        while true; do \
            count_head=\"$(git rev-list --count @)\"; \
            count_branch=\"$(git rev-list --count \"$branch\")\"; \
            count_diff=$(( count_branch - count_head )); \
            if (( count_diff <= 0 )); then \
                break; \
            elif (( count_diff == 1 )); then \
                git add -A && \
                commit \"${@:1:$# - 1}\"; \
                break; \
            else \
                files_changed=\"$(git diff --name-only | wc -l)\"; \
                if (( files_changed == 0 )); then \
                    for (( ; count_diff > 0; count_diff -- )); do \
                        commit_empty \"${@:1:$# - 1}\"; \
                        (( new_commit_count++ )); \
                    done; \
                    break; \
                else \
                    echo 'y\nq' | git add --patch > /dev/null 2>&1 && \
                    commit \"${@:1:$# - 1}\"; \
                fi; \
            fi; \
            (( new_commit_count++ )); \
        done #"
